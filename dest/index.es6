// Generated by CoffeeScript 2.0.0-beta2
import SI from 'seamless-immutable';

import isEqual from 'is-equal';

export default {
  new: SI,
  Array: {
    push: function(siArray, ...pushData) {
      if (!pushData) {
        return;
      }
      return siArray.concat.apply(siArray, pushData);
    },
    set: function(siArray, setIndex, ...setData) {
      return siArray.flatMap(function(item, index) {
        if (index !== setIndex) {
          return item;
        }
        return setData;
      });
    },
    remove: function(siArray, removeIndex) {
      if (typeof removeIndex !== 'number') {
        return siArray;
      }
      return siArray.flatMap(function(item, index) {
        if (index !== removeIndex) {
          return item;
        }
        return [];
      });
    },
    removeItem: function(siArray, rItem) {
      return siArray.flatMap(function(item, index) {
        if (!isEqual(item, SI(rItem))) {
          return item;
        }
        return [];
      });
    },
    eachAsMutable: function(siArray, itemHandler) {
      var i, len, r, siObject;
      r = [];
      for (i = 0, len = siArray.length; i < len; i++) {
        siObject = siArray[i];
        if (itemHandler) {
          siObject = itemHandler(siObject);
        }
        r.push(siObject.asMutable());
      }
      return r;
    }
  }
};
